/**
 * 
 */
package setvis.shape;

import java.awt.Shape;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;

import setvis.SetOutline;
import setvis.VecUtil;

/**
 * Generates a bezier interpolated {@link Shape} for the vertices generated by
 * {@link SetOutline#createOutline(Rectangle2D[], Rectangle2D[])}.
 * 
 * @author Joschi <josua.krause@googlemail.com>
 * 
 */
public class BezierShapeGenerator extends RoundShapeGenerator {

	/**
	 * Creates an {@link BezierShapeGenerator} with a given set outline creator.
	 * 
	 * @param outline
	 *            The creator of the set outlines.
	 * @param clockwise
	 *            Whether the result of the set outlines are interpreted in
	 *            clockwise order.
	 */
	public BezierShapeGenerator(final SetOutline outline,
			final boolean clockwise) {
		super(outline, clockwise);
	}

	@Override
	protected Shape convertToShape(final Point2D[] points) {
		final GeneralPath res = new GeneralPath();
		final int len = points.length;
		boolean first = true;
		for (int i = 0; i < len; ++i) {
			final Point2D[] vertices = getBezierForPoint(points, i);
			final Point2D p = vertices[0];
			if (first) {
				res.moveTo(p.getX(), p.getY());
				first = false;
			}
			final Point2D s0 = vertices[1];
			final Point2D s1 = vertices[2];
			final Point2D s2 = vertices[3];
			res.curveTo(s0.getX(), s0.getY(), s1.getX(), s1.getY(), s2.getX(),
					s2.getY());
		}
		return res;
	}

	private Point2D[] getBezierForPoint(final Point2D[] points, final int index) {
		final int len = points.length;
		final Point2D point = points[index];
		final Point2D left = points[getOtherIndex(index, len, false)];
		final Point2D right = points[getOtherIndex(index, len, true)];
		return new Point2D[] { VecUtil.middleVec(point, left), point, point,
				VecUtil.middleVec(point, right) };
	}

}
